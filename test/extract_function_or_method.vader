Given javascript (void function):
  const a = 2

  function donc() {
    return 1
  }

  function getParentModuleName() {
    const caller = stack.shift()

    let path2 = caller.split(' ').pop()
    path2 = path2.replace(/^\(/, '')

    return path
  }

Do:
  9j
  Vj
  :'<,'>VjsExtractFunctionOrMethod\<CR>
  thing\<CR>

Expect:
  const a = 2

  function donc() {
    return 1
  }

  function thing(caller) {
    let path2 = caller.split(' ').pop()
    path2 = path2.replace(/^\(/, '')
  }

  function getParentModuleName() {
    const caller = stack.shift()

    thing(caller)

    return path
  }

Given javascript (class method):
  import {foo} from 'bar'

  class Aaa {
    stuff(aa) {
      const b = a
      const n = 2

      const c = this.aaa
      foo(work(c, b, n))

      return c + 3
    }
  }

  function asdf() {
    const x = 5
  }

  const d = 3

Do:
  7j
  Vj
  :'<,'>VjsExtractFunctionOrMethod\<CR>
  thing\<CR>

Expect:
  import {foo} from 'bar'

  class Aaa {
    thing(b, n) {
      const c = this.aaa
      foo(work(c, b, n))
      return c
    }

    stuff(aa) {
      const b = a
      const n = 2

      const c = this.thing(b, n)

      return c + 3
    }
  }

  function asdf() {
    const x = 5
  }

  const d = 3


Given javascript (object method):
  import {foo} from 'bar'

  const aaa = {
    stuff(aa) {
      const b = a
      const n = 2

      const c = this.aaa
      foo(work(c, b, n))

      return c + 3
    }
  }

  function asdf() {
    const x = 5
  }

  const d = 3

Do:
  7j
  Vj
  :'<,'>VjsExtractFunctionOrMethod\<CR>
  thing\<CR>

Expect:
  import {foo} from 'bar'

  const aaa = {
    thing(b, n) {
      const c = this.aaa
      foo(work(c, b, n))
      return c
    },

    stuff(aa) {
      const b = a
      const n = 2

      const c = this.thing(b, n)

      return c + 3
    }
  }

  function asdf() {
    const x = 5
  }

  const d = 3

Given javascript (object function expression):
  import {foo} from 'bar'

  const aaa = {
    stuff: function(aa) {
      const b = a
      const n = 2

      const c = this.aaa
      foo(work(c, b, n))

      return c + 3
    }
  }

  function asdf() {
    const x = 5
  }

  const d = 3

Do:
  7j
  Vj
  :'<,'>VjsExtractFunctionOrMethod\<CR>
  thing\<CR>

Expect javascript:
  import {foo} from 'bar'

  const aaa = {
    thing(b, n) {
      const c = this.aaa
      foo(work(c, b, n))
      return c
    },

    stuff: function(aa) {
      const b = a
      const n = 2

      const c = this.thing(b, n)

      return c + 3
    }
  }

  function asdf() {
    const x = 5
  }

  const d = 3

Given javascript (object arrow function expression):
  import {foo} from 'bar'

  function b() {
    const aaa = {
      stuff: a => {
        const b = a
        const n = 2

        var c = this.aaa
        foo(work(c, b, n))
        return c + 3
      }
    }
  }

Do:
  8j
  Vj
  :'<,'>VjsExtractFunctionOrMethod\<CR>
  thing\<CR>

Expect javascript (dunno why the indentation is wrong - it works for real):
  import {foo} from 'bar'

  function thing(b, n) {
    var c = this.aaa
    foo(work(c, b, n))
    return c
  }

  function b() {
    const aaa = {
      stuff: a => {
        const b = a
        const n = 2

      var c = thing.call(this, b, n)
        return c + 3
      }
    }
  }

Given javascript:
  function notSillyBlankIEObject (element) {
    return Object.keys(element).length > 0
  }
  module.exports = {
    focus: function (element, options) {
      var focus = typeof options === 'object' && options.hasOwnProperty('focus') ? options.focus : true

      if (focus) {
        var $ = this.get('$')
        var document = this.get('document')
        if (element && element.length > 0) {
          element = element[0]
        }

        var activeElement = document.activeElement
        if (activeElement && !$(activeElement).is(':focus') && notSillyBlankIEObject(activeElement)) {
          $(activeElement).trigger('blur')
        }
        if (['[object Document]', '[object HTMLDocument]'].indexOf(document.toString()) === -1) {
          document.activeElement = element
        }
        $(element).focus()
      }
    },
  }

Do:
  14j
  V3j
  :'<,'>VjsExtractFunctionOrMethod\<CR>
  thing\<CR>

Expect javascript:
  function notSillyBlankIEObject (element) {
    return Object.keys(element).length > 0
  }
  function thing($, document) {
    var activeElement = document.activeElement
    if (activeElement && !$(activeElement).is(':focus') && notSillyBlankIEObject(activeElement)) {
      $(activeElement).trigger('blur')
    }
  }

  module.exports = {
    focus: function (element, options) {
      var focus = typeof options === 'object' && options.hasOwnProperty('focus') ? options.focus : true

      if (focus) {
        var $ = this.get('$')
        var document = this.get('document')
        if (element && element.length > 0) {
          element = element[0]
        }

        thing($, document)
        if (['[object Document]', '[object HTMLDocument]'].indexOf(document.toString()) === -1) {
          document.activeElement = element
        }
        $(element).focus()
      }
    },
  }

" Execute:
"   call LogAllMessages()
