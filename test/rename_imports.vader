Given javascript (filename only renames in the current file directory):

Execute:
  file test/fixtures/deeper/stuff.js

Do:
  :VjsRenameFile\<CR>
  thing.js\<CR>

Execute:
  AssertEqual GetQFListFiles(), [
    \ {'lnum': 1, 'fname': 'test/fixtures/blops.js', 'text': "const stuff = require('./deeper/thing')"},
    \ {'lnum': 2, 'fname': 'test/fixtures/deeper/blah.jsx', 'text': 'import stuff from "./thing"'},
    \ {'lnum': 3, 'fname': 'test/fixtures/package/index.js', 'text': 'const stuff = require("../deeper/thing")'},
    \ {'lnum': 4, 'fname': 'test/fixtures/banana.js', 'text': 'import "./deeper/thing"'},
  \]

Given javascript (path from the project root 1):

Execute:
  file test/fixtures/deeper/stuff.js

Do:
  :VjsRenameFile\<CR>
  test/fixtures/thing.js\<CR>

Execute:
  AssertEqual GetQFListFiles(), [
    \ {'lnum': 1, 'fname': 'test/fixtures/blops.js', 'text': "const stuff = require('./thing')"},
    \ {'lnum': 2, 'fname': 'test/fixtures/deeper/blah.jsx', 'text': 'import stuff from "../thing"'},
    \ {'lnum': 3, 'fname': 'test/fixtures/package/index.js', 'text': 'const stuff = require("../thing")'},
    \ {'lnum': 4, 'fname': 'test/fixtures/banana.js', 'text': 'import "./thing"'},
  \]

Given javascript (moving to a sibling folder):

Execute:
  file test/fixtures/deeper/stuff.js

Do:
  :VjsRenameFile\<CR>
  test/fixtures/package/thing.js\<CR>

Execute:
  AssertEqual GetQFListFiles(), [
    \ {'lnum': 1, 'fname': 'test/fixtures/blops.js', 'text': "const stuff = require('./package/thing')"},
    \ {'lnum': 2, 'fname': 'test/fixtures/deeper/blah.jsx', 'text': 'import stuff from "../package/thing"'},
    \ {'lnum': 3, 'fname': 'test/fixtures/package/index.js', 'text': 'const stuff = require("./thing")'},
    \ {'lnum': 4, 'fname': 'test/fixtures/banana.js', 'text': 'import "./package/thing"'},
  \]

" Execute:
"   call LogAllMessages()
